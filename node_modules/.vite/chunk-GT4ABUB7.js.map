{
  "version": 3,
  "sources": ["../@mui/material/useMediaQuery/useMediaQuery.js"],
  "sourcesContent": ["import * as React from 'react';\nimport { getThemeProps, useThemeWithoutDefault as useTheme } from '@mui/system';\nimport useEnhancedEffect from '../utils/useEnhancedEffect';\n/**\n * @deprecated Not used internally. Use `MediaQueryListEvent` from lib.dom.d.ts instead.\n */\n\nexport default function useMediaQuery(queryInput, options = {}) {\n  const theme = useTheme(); // Wait for jsdom to support the match media feature.\n  // All the browsers MUI support have this built-in.\n  // This defensive check is here for simplicity.\n  // Most of the time, the match media logic isn't central to people tests.\n\n  const supportMatchMedia = typeof window !== 'undefined' && typeof window.matchMedia !== 'undefined';\n  const {\n    defaultMatches = false,\n    matchMedia = supportMatchMedia ? window.matchMedia : null,\n    noSsr = false,\n    ssrMatchMedia = null\n  } = getThemeProps({\n    name: 'MuiUseMediaQuery',\n    props: options,\n    theme\n  });\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof queryInput === 'function' && theme === null) {\n      console.error(['MUI: The `query` argument provided is invalid.', 'You are providing a function without a theme in the context.', 'One of the parent elements needs to use a ThemeProvider.'].join('\\n'));\n    }\n  }\n\n  let query = typeof queryInput === 'function' ? queryInput(theme) : queryInput;\n  query = query.replace(/^@media( ?)/m, '');\n  const [match, setMatch] = React.useState(() => {\n    if (noSsr && supportMatchMedia) {\n      return matchMedia(query).matches;\n    }\n\n    if (ssrMatchMedia) {\n      return ssrMatchMedia(query).matches;\n    } // Once the component is mounted, we rely on the\n    // event listeners to return the correct matches value.\n\n\n    return defaultMatches;\n  });\n  useEnhancedEffect(() => {\n    let active = true;\n\n    if (!supportMatchMedia) {\n      return undefined;\n    }\n\n    const queryList = matchMedia(query);\n\n    const updateMatch = () => {\n      // Workaround Safari wrong implementation of matchMedia\n      // TODO can we remove it?\n      // https://github.com/mui-org/material-ui/pull/17315#issuecomment-528286677\n      if (active) {\n        setMatch(queryList.matches);\n      }\n    };\n\n    updateMatch();\n    queryList.addListener(updateMatch);\n    return () => {\n      active = false;\n      queryList.removeListener(updateMatch);\n    };\n  }, [query, matchMedia, supportMatchMedia]);\n\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useDebugValue({\n      query,\n      match\n    });\n  }\n\n  return match;\n}"],
  "mappings": ";;;;;;;;;;;;;;;AAAA,YAAuB;AACvB;AACA;AAKe,uBAAuB,YAAY,UAAU,IAAI;AAC9D,QAAM,QAAQ;AAKd,QAAM,oBAAoB,OAAO,WAAW,eAAe,OAAO,OAAO,eAAe;AACxF,QAAM;AAAA,IACJ,iBAAiB;AAAA,IACjB,aAAa,oBAAoB,OAAO,aAAa;AAAA,IACrD,QAAQ;AAAA,IACR,gBAAgB;AAAA,MACd,cAAc;AAAA,IAChB,MAAM;AAAA,IACN,OAAO;AAAA,IACP;AAAA;AAGF,MAAI,MAAuC;AACzC,QAAI,OAAO,eAAe,cAAc,UAAU,MAAM;AACtD,cAAQ,MAAM,CAAC,kDAAkD,gEAAgE,4DAA4D,KAAK;AAAA;AAAA;AAItM,MAAI,QAAQ,OAAO,eAAe,aAAa,WAAW,SAAS;AACnE,UAAQ,MAAM,QAAQ,gBAAgB;AACtC,QAAM,CAAC,OAAO,YAAY,AAAM,eAAS,MAAM;AAC7C,QAAI,SAAS,mBAAmB;AAC9B,aAAO,WAAW,OAAO;AAAA;AAG3B,QAAI,eAAe;AACjB,aAAO,cAAc,OAAO;AAAA;AAK9B,WAAO;AAAA;AAET,4BAAkB,MAAM;AACtB,QAAI,SAAS;AAEb,QAAI,CAAC,mBAAmB;AACtB,aAAO;AAAA;AAGT,UAAM,YAAY,WAAW;AAE7B,UAAM,cAAc,MAAM;AAIxB,UAAI,QAAQ;AACV,iBAAS,UAAU;AAAA;AAAA;AAIvB;AACA,cAAU,YAAY;AACtB,WAAO,MAAM;AACX,eAAS;AACT,gBAAU,eAAe;AAAA;AAAA,KAE1B,CAAC,OAAO,YAAY;AAEvB,MAAI,MAAuC;AAEzC,IAAM,oBAAc;AAAA,MAClB;AAAA,MACA;AAAA;AAAA;AAIJ,SAAO;AAAA;",
  "names": []
}
